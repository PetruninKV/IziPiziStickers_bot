import telebot
from telebot import types
import config
import requests
from rembg import remove
from PIL import Image
import io
from dataclasses import dataclass
from random import randint


@dataclass
class Initialization:
    bot: telebot.TeleBot
    message: telebot.types.Message

    
class Comands(Initialization):
    
    def start(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        botton1 = types.KeyboardButton('–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ')
        botton2 = types.KeyboardButton('–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è')
        botton3 = types.KeyboardButton('–ê —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ?')
        botton4 = types.KeyboardButton('–¢—ã –≥–¥–µ –≤–æ–æ–±—â–µ –µ—Å—Ç—å?')
        markup.add(botton1, botton2, botton3, botton4)        

        start_mess = f'–í–æ–∑–¥—É—à–Ω—ã–π –≥–∞–º–∞—Ä–¥–∂–æ–±–∞, <b>{self.message.from_user.first_name}</b>!\n–û—Ç –º–æ–µ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞ —Ç–≤–æ–µ–º—É –¥—É—à–µ–≤–Ω–æ –≤ –¥—É—à—É! üá¨üá™'
        self.bot.send_message(self.message.chat.id, start_mess, parse_mode='html', reply_markup=markup)
        self.bot.send_sticker(self.message.chat.id, config.Sti—Åker_id.stick_welcome)

    def finish(self):
        self.bot.send_message(self.message.chat.id, '–ù–∞–∫—Ö–≤–∞–º–¥–∏—Å')


class Text(Initialization):
    
    def send_instruction(self):
        self.bot.send_message(self.message.chat.id, '–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ç–≤–æ–∏ —Ñ–æ—Ç–æ. –ê –∏–º–µ–Ω–Ω–æ - —É–±–∏—Ä–∞—é —Ñ–æ–Ω, –¥–µ–ª–∞—é –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä. –í–æ—Ç –ø—Ä–∏–º–µ—Ä:')
        with open('./test_photo/photo.jpg', 'rb') as photo:
            self.bot.send_photo(self.message.chat.id, photo,  caption='–¢—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –º–Ω–µ –æ–±—ã—á–Ω–æ–µ —Ñ–æ—Ç–æ')    
        with open('./test_photo/test_for_stick_file.png', 'rb') as photo:
            self.bot.send_document(self.message.chat.id, photo, caption='—è —Ç–µ–±–µ –≤–æ–∑–≤—Ä–∞—â–∞—é —Ñ–∞–π–ª  –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–∞')        

    def send_about_me(self):
        mes = """–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –Ω–∞–±–æ—Ä —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ç–∏–∫–µ—Ä–∞–º–∏, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–æ–µ–º—É –±—Ä–∞—Ç–∏—à–∫–µ @Stickers. –¢–∞–º –≤—Å–µ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ –ø–æ–Ω—è—Ç–Ω–æ:
        - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Ñ–æ—Ç–æ
        - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—à—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–º–∞–π–ª–∏–∫
        - –≤—É–∞–ª—è!
–ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å. <b>–§–æ—Ç–æ –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞</b> ‚Äî <i>—Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ WEBP —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –≤ –∫–≤–∞–¥—Ä–∞—Ç 512x512</i>.
–ü–æ—ç—Ç–æ–º—É —è —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–∞.
–ù–∞–∂–º–∏ –Ω–∞ '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∏–º–µ—Ä.
        """
        self.bot.send_message(self.message.chat.id, mes, parse_mode='html')        
    
    def send_github(self):
        mes1 = """–Ø volvo —Å—Ä–µ–¥–∏ –∞–≤—Ç–æ
–Ø –æ–≥–Ω–µ—Ç—É—à–∏—Ç–µ–ª—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∂–∞—Ä–∞
–Ø pfizer –∏–∑ –≤—Å–µ—Ö –≤–∞–∫—Ü–∏–Ω
–Ø –¥—é—Ä–µ–∫—Å –≤ –º–∏—Ä–µ —Å–µ–∫—Å–∞
–í –æ–±—â–µ–º, –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –º–æ—ë –≤—Ç–æ—Ä–æ–µ –∏–º—è!"""
        mes2 = """–ú–æ–π –∫–æ–¥ —É—Å—Ç—Ä–æ–µ–Ω —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ —è –Ω–µ —Ö—Ä–∞–Ω—é –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∞ –ª–∏—à—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ. 
–ú–æ–∂–µ—à—å –≤ —ç—Ç–æ–º —É–±–µ–¥–∏—Ç—å—Å—è, –ø–æ—Å–º–æ—Ç—Ä–µ–≤ –∏—Å—Ö–æ–¥–Ω–∏–∫ –∫–æ–¥–∞:"""
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ñ–º–∞–∫ —Å—é–¥–∞', url='https://github.com/PetruninKV/telebot_make_foto_for_sticker'))
        self.bot.send_message(self.message.chat.id, mes1)
        self.bot.send_message(self.message.chat.id, mes2, reply_markup=markup)        

    def send_location(self):
        self.bot.send_message(self.message.chat.id, '–Ø —Ç–æ —Ç—É—Ç, —Ç–æ —Ç–∞–º. –ö—Ä—É—á—É—Å—å, –≤–µ—Ä—á—É—Å—å')
        location_latitude =  randint(-60, 60) + randint(20000, 70000) * 0.00001
        location_longitude =  randint(-60, 60) + randint(20000, 70000) * 0.00001
        self.bot.send_location(self.message.chat.id, location_latitude, location_longitude)
        self.bot.send_message(self.message.chat.id, '—Å–µ–π—á–∞—Å –∑–¥–µ—Å—å, –ª—é–±–∏–º–∫–∞ ‚ù§Ô∏è')            
    
    def other_question(self):
        self.bot.send_message(self.message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è. –ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ —Ç–∞–∫–æ–π —É–º–Ω—ã–π –∫–∞–∫ ChapGPT.')
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å', url='https://chat.openai.com'))
        self.bot.send_message(self.message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª–∞—Ç—å —Å —É–º–Ω—ã–º:', reply_markup=markup)        


class Documents(Initialization):

    def send_error(self):
        self.bot.send_message(self.message.chat.id, '–ù–µ –ø–æ–Ω–∏–º–∞—Ç—å —Ç–µ–±—è. –ü–æ–∫–∞ —á—Ç–æ —è –Ω–µ —Ç–∞–∫–æ–π —É–º–Ω—ã–π –∫–∞–∫ ChapGPT.')
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–í–æ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—å', url='https://chat.openai.com'))
        self.bot.send_message(self.message.chat.id, '–ï—Å–ª–∏ —Ö–æ—á–µ—Ç—Å—è –ø–æ–±–æ–ª–∞—Ç—å —Å —É–º–Ω—ã–º:', reply_markup=markup)        


class Photos(Initialization):

    def __init__(self, bot, message):
        super().__init__(bot, message)
        self.photo = self.message.photo[-1].file_id

    def send_first_reaction(self):
        self.bot.send_message(self.message.chat.id, '–≤–∞—É, –∫–∞–∫–æ–µ —Ñ–æ—Ç–æ!')

    def send_processing(self):
        self.bot.send_message(self.message.chat.id, '<i>–∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞...</i> üí°', parse_mode='html')
        self.bot.send_sticker(self.message.chat.id, config.Sti—Åker_id.stick_processing)        

    @property
    def photo(self):
        print('property', type(self._file_content))
        return self._file_content

    @photo.setter
    def photo(self, file_id):
        file_info = self.bot.get_file(file_id)
        file_url = f'https://api.telegram.org/file/bot{self.bot.token}/{file_info.file_path}'
        self._file_content = requests.get(file_url, verify=False).content        

    def del_background(self):
        self._file_content = remove(self._file_content)
        
    def rescaling(self):
        im = Image.open(io.BytesIO(self._file_content))
        weight, height = im.size
        if weight <= 512 and height <= 512:
            new_weight = weight
            new_height = height
        else:
            if weight == height:
                new_weight = 512
                new_height = 512
            elif weight > height:
                new_weight = 512
                new_height = int(512 * height/weight)
            else:
                new_weight = int(512  * weight / height)
                new_height = 512
        resize_photo = im.resize((new_weight, new_height))
        r = resize_photo.tobytes()
        with io.BytesIO() as f:
            resize_photo.save(f, format='PNG')
            image_bytes = f.getvalue()
            self._file_content = image_bytes
        
    def send_res(self):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ü–µ—Ä–µ—à–ª–∏ —Ñ–æ—Ç–æ @Stickers', switch_inline_query='–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è' )) 

        doc = io.BytesIO(self._file_content)    
        doc.name = 'foto_for_sticker.png'
        self.bot.send_document(self.message.chat.id, doc, caption='–ì–æ—Ç–æ–≤–æ!', reply_markup=markup)





